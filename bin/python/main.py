# Generated by Haxe 4.3.6
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect
import re as python_lib_Re
import sys as python_lib_Sys
import traceback as python_lib_Traceback
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class Class: pass


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)



class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_statics = ["main", "topInterp", "serialize"]

    @staticmethod
    def main():
        _hx_str = Std.string(Main.topInterp("{{proc {a b} {if {<= a b} 1 0}} 1 1}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("\"foobar\""))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("*"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{proc {} 0}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{{proc {a b} {* a b}} 5 3}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{declare {[a 5] [b 7]} in {* a b}}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{declare {[f {proc {f n} {if {<= n 1} 1 {* n {f f {- n 1}}}}}]} in {f f 6}}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{equal? 1 2}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{++ \"this \" \"Should work\"}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))
        _hx_str = Std.string(Main.topInterp("{seq \"this\" \"Should work\"}"))
        python_Lib.printString((("" + ("null" if _hx_str is None else _hx_str)) + HxOverrides.stringOrNull(python_Lib.lineEnd)))

    @staticmethod
    def topInterp(program):
        tokenized = tokenizer_Tokenizer.tokenize(program)
        parsed = parser_Parser.parse(tokenized)
        env = factory_EnvironmentFactory.getEnvironment()
        result = interpreter_Interpreter.interp(parsed,env)
        return Main.serialize(result)

    @staticmethod
    def serialize(value):
        tmp = value.index
        if (tmp == 0):
            n = value.params[0]
            return ("" + Std.string(n))
        elif (tmp == 1):
            string = value.params[0]
            return (("\"" + ("null" if string is None else string)) + "\"")
        elif (tmp == 2):
            _hx_bool = value.params[0]
            return ("" + Std.string(_hx_bool))
        elif (tmp == 3):
            _g = value.params[0]
            _g = value.params[1]
            _g = value.params[2]
            return "#<procedure>"
        elif (tmp == 4):
            _g = value.params[0]
            return "#<primop>"
        else:
            pass


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if ((type(t) == type) and (t == Dynamic)):
            return (v is not None)
        isBool = isinstance(v,bool)
        if (((type(t) == type) and (t == Bool)) and isBool):
            return True
        if ((((not isBool) and (not ((type(t) == type) and (t == Bool)))) and ((type(t) == type) and (t == Int))) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and ((type(t) == type) and (t == Int))):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and ((type(t) == type) and (t == Float))) and isinstance(v,(float, int))):
            return True
        if ((type(t) == type) and (t == str)):
            return isinstance(v,str)
        isEnumType = ((type(t) == type) and (t == Enum))
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = ((type(t) == type) and (t == Class))
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48))) or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except BaseException as _g:
            None
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        self.b = python_lib_io_StringIO()



class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["systemName", "stdin"]

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        x = _g
        if x.startswith("linux"):
            return "Linux"
        else:
            _g1 = _g
            _hx_local_0 = len(_g1)
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            else:
                raise haxe_Exception.thrown("not supported platform")

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

class interpreter_Value(Enum):
    __slots__ = ()
    _hx_class_name = "interpreter.Value"
    _hx_constructs = ["NumV", "StringV", "BoolV", "CloV", "PrimopV"]

    @staticmethod
    def NumV(n):
        return interpreter_Value("NumV", 0, (n,))

    @staticmethod
    def StringV(string):
        return interpreter_Value("StringV", 1, (string,))

    @staticmethod
    def BoolV(bool):
        return interpreter_Value("BoolV", 2, (bool,))

    @staticmethod
    def CloV(args,body,env):
        return interpreter_Value("CloV", 3, (args,body,env))

    @staticmethod
    def PrimopV(op):
        return interpreter_Value("PrimopV", 4, (op,))


class interpreter_Primop:
    _hx_class_name = "interpreter.Primop"
    __slots__ = ()
    _hx_methods = ["apply"]


class interpreter_impl_PlusPrimop:
    _hx_class_name = "interpreter.impl.PlusPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.NumV((a + b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for + " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for + " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for + " + Std.string(args)))



class interpreter_impl_MinusPrimop:
    _hx_class_name = "interpreter.impl.MinusPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.NumV((a - b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))



class interpreter_impl_MultiplyPrimop:
    _hx_class_name = "interpreter.impl.MultiplyPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.NumV((a * b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for * " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for * " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for * " + Std.string(args)))



class interpreter_impl_DividePrimop:
    _hx_class_name = "interpreter.impl.DividePrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    if (b == 0):
                        raise haxe_Exception("QWJZ: Division by zero")
                    return interpreter_Value.NumV((a / b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for / " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for / " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for / " + Std.string(args)))



class interpreter_impl_LeqPrimop:
    _hx_class_name = "interpreter.impl.LeqPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.BoolV((a <= b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for <= " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for <= " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for <= " + Std.string(args)))



class interpreter_impl_ReadStrPrimop:
    _hx_class_name = "interpreter.impl.ReadStrPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        try:
            python_Lib.printString("> ")
            input = Sys.stdin().readLine()
            return interpreter_Value.StringV(input)
        except BaseException as _g:
            e = haxe_Exception.caught(_g)
            raise haxe_Exception(("QWJZ Error reading string: " + HxOverrides.stringOrNull(e.get_message())))



class interpreter_impl_ReadNumPrimop:
    _hx_class_name = "interpreter.impl.ReadNumPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        try:
            python_Lib.printString("> ")
            input = Sys.stdin().readLine()
            num = Std.parseFloat(input)
            if python_lib_Math.isnan(num):
                raise haxe_Exception("QWJZ Invalid number")
            return interpreter_Value.NumV(num)
        except BaseException as _g:
            e = haxe_Exception.caught(_g)
            raise haxe_Exception(("QWJZ Error reading number: " + HxOverrides.stringOrNull(e.get_message())))



class interpreter_impl_EqualPrimop:
    _hx_class_name = "interpreter.impl.EqualPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) != 2):
            raise haxe_Exception(("QWJZ: Expected 2 arguments for =, got " + Std.string(len(args))))
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            tmp = _g.index
            if (tmp == 0):
                if (_g1.index == 0):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.BoolV((a == b))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))
            elif (tmp == 3):
                if (_g1.index == 3):
                    args2 = _g1.params[0]
                    body2 = _g1.params[1]
                    env2 = _g1.params[2]
                    env1 = _g.params[2]
                    body1 = _g.params[1]
                    args1 = _g.params[0]
                    return interpreter_Value.BoolV(False)
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for - " + Std.string(args)))



class interpreter_impl_JoinPrimop:
    _hx_class_name = "interpreter.impl.JoinPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 2):
            _g = (args[0] if 0 < len(args) else None)
            _g1 = (args[1] if 1 < len(args) else None)
            if (_g.index == 1):
                if (_g1.index == 1):
                    b = _g1.params[0]
                    a = _g.params[0]
                    return interpreter_Value.StringV((("null" if a is None else a) + ("null" if b is None else b)))
                else:
                    raise haxe_Exception(("QWJZ: Invalid arguments for ++ " + Std.string(args)))
            else:
                raise haxe_Exception(("QWJZ: Invalid arguments for ++ " + Std.string(args)))
        else:
            raise haxe_Exception(("QWJZ: Invalid arguments for ++ " + Std.string(args)))



class interpreter_impl_SeqPrimop:
    _hx_class_name = "interpreter.impl.SeqPrimop"
    __slots__ = ()
    _hx_methods = ["apply"]
    _hx_interfaces = [interpreter_Primop]

    def __init__(self):
        pass

    def apply(self,args):
        if (len(args) == 0):
            raise haxe_Exception(("QWJZ: Invalid arguments for seq " + Std.string(args)))
        return python_internal_ArrayImpl._get(args, (len(args) - 1))



class factory_EnvironmentFactory:
    _hx_class_name = "factory.EnvironmentFactory"
    __slots__ = ()
    _hx_statics = ["INITIAL_SYMBOLS", "INITIAL_PRIMOPS", "getEnvironment"]

    @staticmethod
    def getEnvironment():
        return interpreter_Environment.empty().extend(factory_EnvironmentFactory.INITIAL_SYMBOLS,factory_EnvironmentFactory.INITIAL_PRIMOPS)


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "toString", "get_message", "get_native"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def toString(self):
        return self.get_message()

    def get_message(self):
        return str(self)

    def get_native(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e



class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(("null" if ((value is None)) else Std.string(value)),previous,native)
        self.value = value

    def unwrap(self):
        return self.value



class haxe_ds_GenericCell:
    _hx_class_name = "haxe.ds.GenericCell"
    __slots__ = ("elt", "next")
    _hx_fields = ["elt", "next"]

    def __init__(self,elt,next):
        self.elt = elt
        self.next = next



class haxe_ds_GenericStack:
    _hx_class_name = "haxe.ds.GenericStack"
    __slots__ = ("head",)
    _hx_fields = ["head"]

    def __init__(self):
        self.head = None



class haxe_exceptions_PosException(haxe_Exception):
    _hx_class_name = "haxe.exceptions.PosException"
    __slots__ = ("posInfos",)
    _hx_fields = ["posInfos"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,message,previous = None,pos = None):
        self.posInfos = None
        super().__init__(message,previous)
        if (pos is None):
            self.posInfos = _hx_AnonObject({'fileName': "(unknown)", 'lineNumber': 0, 'className': "(unknown)", 'methodName': "(unknown)"})
        else:
            self.posInfos = pos

    def toString(self):
        return ((((((((("" + HxOverrides.stringOrNull(super().toString())) + " in ") + HxOverrides.stringOrNull(self.posInfos.className)) + ".") + HxOverrides.stringOrNull(self.posInfos.methodName)) + " at ") + HxOverrides.stringOrNull(self.posInfos.fileName)) + ":") + Std.string(self.posInfos.lineNumber))



class haxe_exceptions_ArgumentException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.ArgumentException"
    __slots__ = ("argument",)
    _hx_fields = ["argument"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,argument,message = None,previous = None,pos = None):
        self.argument = None
        super().__init__(((("Invalid argument \"" + ("null" if argument is None else argument)) + "\"") if ((message is None)) else message),previous,pos)
        self.argument = argument



class haxe_exceptions_NotImplementedException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.NotImplementedException"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,message = None,previous = None,pos = None):
        if (message is None):
            message = "Not implemented"
        super().__init__(message,previous,pos)


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["getString", "toString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    def getString(self,pos,_hx_len,encoding = None):
        tmp = (encoding is None)
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        return self.getString(0,self.length)



class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = bytearray()

    def getBytes(self):
        _hx_bytes = haxe_io_Bytes(len(self.b),self.b)
        self.b = None
        return _hx_bytes


class haxe_io_Encoding(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Encoding"
    _hx_constructs = ["UTF8", "RawNative"]
haxe_io_Encoding.UTF8 = haxe_io_Encoding("UTF8", 0, ())
haxe_io_Encoding.RawNative = haxe_io_Encoding("RawNative", 1, ())


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, (e,))
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, ())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, ())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, ())


class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["readByte", "set_bigEndian", "readLine"]

    def readByte(self):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Input.hx", 'lineNumber': 53, 'className': "haxe.io.Input", 'methodName': "readByte"}))

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def readLine(self):
        buf = haxe_io_BytesBuffer()
        last = None
        s = None
        try:
            while True:
                last = self.readByte()
                if (not ((last != 10))):
                    break
                buf.b.append(last)
            s = buf.getBytes().toString()
            if (HxString.charCodeAt(s,(len(s) - 1)) == 13):
                s = HxString.substr(s,0,-1)
        except BaseException as _g:
            None
            _g1 = haxe_Exception.caught(_g).unwrap()
            if Std.isOfType(_g1,haxe_io_Eof):
                e = _g1
                s = buf.getBytes().toString()
                if (len(s) == 0):
                    raise haxe_Exception.thrown(e)
            else:
                raise _g
        return s



class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()



class interpreter_Environment:
    _hx_class_name = "interpreter.Environment"
    __slots__ = ("symbols", "values")
    _hx_fields = ["symbols", "values"]
    _hx_methods = ["extend", "lookup"]
    _hx_statics = ["empty"]

    def __init__(self,symbols,values):
        if (len(symbols) != len(values)):
            print(str(((("Cannot create environment with symbols of length " + Std.string(len(symbols))) + " and values of length ") + Std.string(len(values)))))
            raise haxe_exceptions_ArgumentException("",None,None,_hx_AnonObject({'fileName': "src/interpreter/Environment.hx", 'lineNumber': 18, 'className': "interpreter.Environment", 'methodName': "new"}))
        self.symbols = symbols
        self.values = values

    def extend(self,newSyms,newVals):
        extendedSymbols = (newSyms + self.symbols)
        extendedValues = (newVals + self.values)
        return interpreter_Environment(extendedSymbols,extendedValues)

    def lookup(self,symbol):
        _g = 0
        _g1 = len(self.symbols)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if ((self.symbols[i] if i >= 0 and i < len(self.symbols) else None) == symbol):
                return (self.values[i] if i >= 0 and i < len(self.values) else None)
        raise haxe_Exception((("QWJZ: symbol " + ("null" if symbol is None else symbol)) + " not found"))

    @staticmethod
    def empty():
        return interpreter_Environment([],[])



class interpreter_Interpreter:
    _hx_class_name = "interpreter.Interpreter"
    __slots__ = ()
    _hx_statics = ["interp", "handleClosure"]

    @staticmethod
    def interp(expr,env):
        tmp = expr.index
        if (tmp == 0):
            n = expr.params[0]
            return interpreter_Value.NumV(n)
        elif (tmp == 1):
            string = expr.params[0]
            return interpreter_Value.StringV(string)
        elif (tmp == 2):
            symbol = expr.params[0]
            return env.lookup(symbol)
        elif (tmp == 3):
            condition = expr.params[0]
            ifTrue = expr.params[1]
            ifFalse = expr.params[2]
            truthiness = interpreter_Interpreter.interp(condition,env)
            if (truthiness.index == 2):
                if truthiness.params[0]:
                    return interpreter_Interpreter.interp(ifTrue,env)
                else:
                    return interpreter_Interpreter.interp(ifFalse,env)
            else:
                raise haxe_Exception(("QWJZ: Invalid if condition " + Std.string(truthiness)))
        elif (tmp == 4):
            args = expr.params[0]
            body = expr.params[1]
            return interpreter_Value.CloV(args,body,env)
        elif (tmp == 5):
            proc = expr.params[0]
            args = expr.params[1]
            closure = interpreter_Interpreter.interp(proc,env)
            def _hx_local_1():
                def _hx_local_0(e):
                    return interpreter_Interpreter.interp(e,env)
                return interpreter_Interpreter.handleClosure(closure,list(map(_hx_local_0,args)))
            return _hx_local_1()
        else:
            pass

    @staticmethod
    def handleClosure(closure,passedArgs):
        tmp = closure.index
        if (tmp == 3):
            requiredArgs = closure.params[0]
            body = closure.params[1]
            env = closure.params[2]
            extendedEnv = env.extend(requiredArgs,passedArgs)
            return interpreter_Interpreter.interp(body,extendedEnv)
        elif (tmp == 4):
            op = closure.params[0]
            return op.apply(passedArgs)
        else:
            raise haxe_Exception(("QWJZ: expected a closure, got " + Std.string(closure)))


class parser_ClauseC:
    _hx_class_name = "parser.ClauseC"
    __slots__ = ("symbol", "value")
    _hx_fields = ["symbol", "value"]

    def __init__(self,clause):
        self.value = None
        self.symbol = None
        if (clause.index == 0):
            _g = clause.params[0]
            if (len(_g) == 2):
                _g1 = (_g[0] if 0 < len(_g) else None)
                if (_g1.index == 1):
                    symbol = _g1.params[0]
                    value = (_g[1] if 1 < len(_g) else None)
                    self.symbol = symbol
                    self.value = parser_Parser.parse(value)
                else:
                    raise haxe_Exception(("QWJZ: cannot parse clause " + Std.string(clause)))
            else:
                raise haxe_Exception(("QWJZ: cannot parse clause " + Std.string(clause)))
        else:
            raise haxe_Exception(("QWJZ: cannot parse clause " + Std.string(clause)))


class parser_ExprC(Enum):
    __slots__ = ()
    _hx_class_name = "parser.ExprC"
    _hx_constructs = ["NumC", "StringC", "IdC", "IfC", "ProcC", "AppC"]

    @staticmethod
    def NumC(n):
        return parser_ExprC("NumC", 0, (n,))

    @staticmethod
    def StringC(string):
        return parser_ExprC("StringC", 1, (string,))

    @staticmethod
    def IdC(symbol):
        return parser_ExprC("IdC", 2, (symbol,))

    @staticmethod
    def IfC(condition,ifTrue,ifFalse):
        return parser_ExprC("IfC", 3, (condition,ifTrue,ifFalse))

    @staticmethod
    def ProcC(args,body):
        return parser_ExprC("ProcC", 4, (args,body))

    @staticmethod
    def AppC(proc,args):
        return parser_ExprC("AppC", 5, (proc,args))


class parser_ParseUtils:
    _hx_class_name = "parser.ParseUtils"
    __slots__ = ()
    _hx_statics = ["IS_NUMERIC_REGEXP", "IS_STRING_REGEXP", "IS_ID_REGEXP", "ILLEGAL_SYMBOLS", "isString", "isNumeric", "isId", "sexpsToIds", "allAreLeafTs", "leafTToIdString"]

    @staticmethod
    def isString(token):
        _this = parser_ParseUtils.IS_STRING_REGEXP
        _this.matchObj = python_lib_Re.search(_this.pattern,token)
        return (_this.matchObj is not None)

    @staticmethod
    def isNumeric(token):
        _this = parser_ParseUtils.IS_NUMERIC_REGEXP
        _this.matchObj = python_lib_Re.search(_this.pattern,token)
        return (_this.matchObj is not None)

    @staticmethod
    def isId(token):
        _this = parser_ParseUtils.IS_ID_REGEXP
        _this.matchObj = python_lib_Re.search(_this.pattern,token)
        if (_this.matchObj is not None):
            return (not (token in parser_ParseUtils.ILLEGAL_SYMBOLS))
        else:
            return False

    @staticmethod
    def sexpsToIds(tokens):
        if (not parser_ParseUtils.allAreLeafTs(tokens)):
            raise haxe_Exception(("QWJZ: Invalid ids " + Std.string(tokens)))
        return list(map(parser_ParseUtils.leafTToIdString,tokens))

    @staticmethod
    def allAreLeafTs(tokens):
        def _hx_local_1():
            def _hx_local_0(x):
                if (x.index == 1):
                    _g = x.params[0]
                    return True
                else:
                    return False
            return (not (False in list(map(_hx_local_0,tokens))))
        return _hx_local_1()

    @staticmethod
    def leafTToIdString(token):
        if (token.index == 1):
            value = token.params[0]
            if parser_ParseUtils.isId(value):
                return value
        raise haxe_Exception(("QWJZ: Illegal symbol " + Std.string(token)))


class parser_Parser:
    _hx_class_name = "parser.Parser"
    __slots__ = ()
    _hx_statics = ["parse", "parseLeafT", "fail"]

    @staticmethod
    def parse(token):
        tmp = token.index
        if (tmp == 0):
            _g = token.params[0]
            _g1 = len(_g)
            if (_g1 == 3):
                _g1 = (_g[0] if 0 < len(_g) else None)
                _g2 = (_g[1] if 1 < len(_g) else None)
                if (_g1.index == 1):
                    if (_g1.params[0] == "proc"):
                        if (_g2.index == 0):
                            rawIds = _g2.params[0]
                            rawBody = (_g[2] if 2 < len(_g) else None)
                            ids = parser_ParseUtils.sexpsToIds(rawIds)
                            body = parser_Parser.parse(rawBody)
                            return parser_ExprC.ProcC(ids,body)
                        else:
                            nodes = _g
                            if (len(nodes) == 0):
                                parser_Parser.fail(token)
                            parsed = list(map(parser_Parser.parse,nodes))
                            return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                    else:
                        nodes = _g
                        if (len(nodes) == 0):
                            parser_Parser.fail(token)
                        parsed = list(map(parser_Parser.parse,nodes))
                        return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                else:
                    nodes = _g
                    if (len(nodes) == 0):
                        parser_Parser.fail(token)
                    parsed = list(map(parser_Parser.parse,nodes))
                    return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
            elif (_g1 == 4):
                _g1 = (_g[0] if 0 < len(_g) else None)
                _g2 = (_g[1] if 1 < len(_g) else None)
                _g3 = (_g[2] if 2 < len(_g) else None)
                _g4 = (_g[3] if 3 < len(_g) else None)
                if (_g1.index == 1):
                    _g5 = _g1.params[0]
                    _hx_local_0 = len(_g5)
                    if (_hx_local_0 == 7):
                        if (_g5 == "declare"):
                            if (_g2.index == 0):
                                if (_g3.index == 1):
                                    if (_g3.params[0] == "in"):
                                        declarations = _g2.params[0]
                                        rawBody = _g4
                                        def _hx_local_1(x):
                                            return parser_ClauseC(x)
                                        clauses = list(map(_hx_local_1,declarations))
                                        def _hx_local_4():
                                            def _hx_local_2(x):
                                                return x.symbol
                                            def _hx_local_3(x):
                                                return x.value
                                            return parser_ExprC.AppC(parser_ExprC.ProcC(list(map(_hx_local_2,clauses)),parser_Parser.parse(rawBody)),list(map(_hx_local_3,clauses)))
                                        return _hx_local_4()
                                    else:
                                        nodes = _g
                                        if (len(nodes) == 0):
                                            parser_Parser.fail(token)
                                        parsed = list(map(parser_Parser.parse,nodes))
                                        return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                                else:
                                    nodes = _g
                                    if (len(nodes) == 0):
                                        parser_Parser.fail(token)
                                    parsed = list(map(parser_Parser.parse,nodes))
                                    return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                            else:
                                nodes = _g
                                if (len(nodes) == 0):
                                    parser_Parser.fail(token)
                                parsed = list(map(parser_Parser.parse,nodes))
                                return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                        else:
                            nodes = _g
                            if (len(nodes) == 0):
                                parser_Parser.fail(token)
                            parsed = list(map(parser_Parser.parse,nodes))
                            return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                    elif (_hx_local_0 == 2):
                        if (_g5 == "if"):
                            condition = _g2
                            ifTrue = _g3
                            ifFalse = _g4
                            return parser_ExprC.IfC(parser_Parser.parse(condition),parser_Parser.parse(ifTrue),parser_Parser.parse(ifFalse))
                        else:
                            nodes = _g
                            if (len(nodes) == 0):
                                parser_Parser.fail(token)
                            parsed = list(map(parser_Parser.parse,nodes))
                            return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                    else:
                        nodes = _g
                        if (len(nodes) == 0):
                            parser_Parser.fail(token)
                        parsed = list(map(parser_Parser.parse,nodes))
                        return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
                else:
                    nodes = _g
                    if (len(nodes) == 0):
                        parser_Parser.fail(token)
                    parsed = list(map(parser_Parser.parse,nodes))
                    return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
            else:
                nodes = _g
                if (len(nodes) == 0):
                    parser_Parser.fail(token)
                parsed = list(map(parser_Parser.parse,nodes))
                return parser_ExprC.AppC((parsed[0] if 0 < len(parsed) else None),parsed[1:None])
        elif (tmp == 1):
            value = token.params[0]
            return parser_Parser.parseLeafT(value)
        else:
            pass

    @staticmethod
    def parseLeafT(value):
        if parser_ParseUtils.isNumeric(value):
            return parser_ExprC.NumC(Std.parseFloat(value))
        if parser_ParseUtils.isId(value):
            return parser_ExprC.IdC(value)
        if parser_ParseUtils.isString(value):
            regexp = EReg("^\"(.*)\"$","")
            regexp.matchObj = python_lib_Re.search(regexp.pattern,value)
            return parser_ExprC.StringC(regexp.matchObj.group(1))
        raise haxe_Exception(("QWJZ: cannot parse " + ("null" if value is None else value)))

    @staticmethod
    def fail(sexp):
        raise haxe_Exception(("QWJZ: Invalid expression " + Std.string(sexp)))

class parser_Sexp(Enum):
    __slots__ = ()
    _hx_class_name = "parser.Sexp"
    _hx_constructs = ["TreeT", "LeafT"]

    @staticmethod
    def TreeT(nodes):
        return parser_Sexp("TreeT", 0, (nodes,))

    @staticmethod
    def LeafT(value):
        return parser_Sexp("LeafT", 1, (value,))


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if ((type(o) == type) and (o == str)):
                return "#String"
            if ((type(o) == type) and (o == list)):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["lineEnd", "printString"]

    @staticmethod
    def printString(_hx_str):
        encoding = "utf-8"
        if (encoding is None):
            encoding = "utf-8"
        python_lib_Sys.stdout.buffer.write(_hx_str.encode(encoding, "strict"))
        python_lib_Sys.stdout.flush()


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["_get"]

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["charCodeAt", "substr"]

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = ["throwEof"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise haxe_Exception.thrown("Write-only stream")

    def throwEof(self):
        self.wasEof = True
        raise haxe_Exception.thrown(haxe_io_Eof())



class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()
    _hx_interfaces = [python_io_IInput]


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["readByte"]
    _hx_statics = []
    _hx_interfaces = [python_io_IInput]
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)

    def readByte(self):
        ret = self.stream.buffer.read(1)
        if (len(ret) == 0):
            self.throwEof()
        return ret[0]



class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileInput]
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def readByte(self):
        return self.impl.readByte()

    def readLine(self):
        return self.impl.readLine()



class tokenizer_TokenBuilder:
    _hx_class_name = "tokenizer.TokenBuilder"
    __slots__ = ()
    _hx_methods = ["append", "build", "getClosingChars", "getTokenType"]

class tokenizer_TokenType(Enum):
    __slots__ = ()
    _hx_class_name = "tokenizer.TokenType"
    _hx_constructs = ["STRING", "NUMBER", "SYMBOL", "PARENT"]
tokenizer_TokenType.STRING = tokenizer_TokenType("STRING", 0, ())
tokenizer_TokenType.NUMBER = tokenizer_TokenType("NUMBER", 1, ())
tokenizer_TokenType.SYMBOL = tokenizer_TokenType("SYMBOL", 2, ())
tokenizer_TokenType.PARENT = tokenizer_TokenType("PARENT", 3, ())


class tokenizer_Tokenizer:
    _hx_class_name = "tokenizer.Tokenizer"
    __slots__ = ("builderStack", "result")
    _hx_fields = ["builderStack", "result"]
    _hx_methods = ["_tokenize", "ingestFirstChar", "ingestChar", "isInString", "handleCompletedToken"]
    _hx_statics = ["LIST_OPENER", "LIST_CLOSER", "TOKEN_DELIMITERS", "STRING_DELIMITERS", "AUTO_CLOSE_TOKEN_BUILDERS", "tokenize"]

    def __init__(self):
        self.result = None
        self.builderStack = haxe_ds_GenericStack()

    def _tokenize(self,program):
        if (len(program) == 0):
            raise haxe_Exception("QWJZ: cannot tokenize program of length 0")
        self.ingestFirstChar(("" if ((0 >= len(program))) else program[0]))
        _g = 1
        _g1 = len(program)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            self.ingestChar(("" if (((i < 0) or ((i >= len(program))))) else program[i]))
        if (self.builderStack.head is not None):
            _this = self.builderStack
            k = _this.head
            nextToken = None
            if (k is None):
                nextToken = None
            else:
                _this.head = k.next
                nextToken = k.elt
            if ((nextToken.getTokenType() in tokenizer_Tokenizer.AUTO_CLOSE_TOKEN_BUILDERS) and ((self.builderStack.head is None))):
                self.result = nextToken.build()
        if (self.result is None):
            raise haxe_Exception(("QWJZ: unfinished program " + ("null" if program is None else program)))
        else:
            return self.result

    def ingestFirstChar(self,char):
        if (char in tokenizer_Tokenizer.LIST_CLOSER):
            raise haxe_Exception((("QWJZ: Invalid first char in program \"" + ("null" if char is None else char)) + "\""))
        if (char in tokenizer_Tokenizer.LIST_OPENER):
            _this = self.builderStack
            _this.head = haxe_ds_GenericCell(tokenizer_impl_TreeTBuilder(char),_this.head)
        else:
            _this = self.builderStack
            _this.head = haxe_ds_GenericCell(tokenizer_impl_LeafTBuilder(char),_this.head)

    def ingestChar(self,char):
        if ((self.result is not None) or ((self.builderStack.head is None))):
            raise haxe_Exception((("QWJZ: \"" + ("null" if char is None else char)) + "\" past end of program"))
        if self.isInString():
            if (not (char in tokenizer_Tokenizer.STRING_DELIMITERS)):
                _this = self.builderStack
                ((None if ((_this.head is None)) else _this.head.elt)).append(parser_Sexp.LeafT(char))
                return
            else:
                _this = self.builderStack
                k = _this.head
                completedString = None
                if (k is None):
                    completedString = None
                else:
                    _this.head = k.next
                    completedString = k.elt
                completedString1 = completedString.build()
                self.handleCompletedToken(completedString1)
                return
        elif (char in tokenizer_Tokenizer.LIST_OPENER):
            newListBuilder = tokenizer_impl_TreeTBuilder(char)
            _this = self.builderStack
            _this.head = haxe_ds_GenericCell(newListBuilder,_this.head)
            return
        elif (char in tokenizer_Tokenizer.LIST_CLOSER):
            _this = self.builderStack
            if (char in ((None if ((_this.head is None)) else _this.head.elt)).getClosingChars()):
                _this = self.builderStack
                k = _this.head
                completed = None
                if (k is None):
                    completed = None
                else:
                    _this.head = k.next
                    completed = k.elt
                self.handleCompletedToken(completed.build())
                if (completed.getTokenType() != tokenizer_TokenType.PARENT):
                    self.ingestChar(char)
                return
            else:
                raise haxe_Exception((("QWJZ: Invalid list closer \"" + ("null" if char is None else char)) + "\""))
        elif (char == " "):
            _this = self.builderStack
            tmp = ((None if ((_this.head is None)) else _this.head.elt)).getTokenType().index
            if (tmp == 0):
                print("Unreachable case reached")
                raise haxe_Exception("QWJZ: Internal error")
            elif (tmp == 1):
                _this = self.builderStack
                k = _this.head
                tmp = None
                if (k is None):
                    tmp = None
                else:
                    _this.head = k.next
                    tmp = k.elt
                self.handleCompletedToken(tmp.build())
                return
            elif (tmp == 2):
                _this = self.builderStack
                k = _this.head
                tmp = None
                if (k is None):
                    tmp = None
                else:
                    _this.head = k.next
                    tmp = k.elt
                self.handleCompletedToken(tmp.build())
                return
            elif (tmp == 3):
                return
            else:
                pass
        else:
            _this = self.builderStack
            tmp = ((None if ((_this.head is None)) else _this.head.elt)).getTokenType().index
            if (tmp == 0):
                print("Unreachable case reached")
                raise haxe_Exception("QWJZ: Internal error")
            elif (tmp == 1):
                _this = self.builderStack
                ((None if ((_this.head is None)) else _this.head.elt)).append(parser_Sexp.LeafT(char))
                return
            elif (tmp == 2):
                _this = self.builderStack
                ((None if ((_this.head is None)) else _this.head.elt)).append(parser_Sexp.LeafT(char))
                return
            elif (tmp == 3):
                _this = self.builderStack
                _this.head = haxe_ds_GenericCell(tokenizer_impl_LeafTBuilder(char),_this.head)
                return
            else:
                pass

    def isInString(self):
        if (self.builderStack.head is not None):
            _this = self.builderStack
            return (((None if ((_this.head is None)) else _this.head.elt)).getTokenType() == tokenizer_TokenType.STRING)
        else:
            return False

    def handleCompletedToken(self,token):
        if (self.builderStack.head is None):
            self.result = token
        else:
            _this = self.builderStack
            ((None if ((_this.head is None)) else _this.head.elt)).append(token)

    @staticmethod
    def tokenize(program):
        return tokenizer_Tokenizer()._tokenize(program)



class tokenizer_impl_LeafTBuilder:
    _hx_class_name = "tokenizer.impl.LeafTBuilder"
    __slots__ = ("stringBuilder", "tokenType")
    _hx_fields = ["stringBuilder", "tokenType"]
    _hx_methods = ["append", "getTokenType", "getClosingChars", "build"]
    _hx_statics = ["NUMBER_STARTER", "STRING_STARTER", "SYMBOL_STARTER"]
    _hx_interfaces = [tokenizer_TokenBuilder]

    def __init__(self,openedBy):
        self.tokenType = None
        self.stringBuilder = StringBuf()
        _this = tokenizer_impl_LeafTBuilder.NUMBER_STARTER
        _this.matchObj = python_lib_Re.search(_this.pattern,openedBy)
        if (_this.matchObj is not None):
            self.tokenType = tokenizer_TokenType.NUMBER
            _this = self.stringBuilder
            s = Std.string(openedBy)
            _this.b.write(s)
        else:
            _this = tokenizer_impl_LeafTBuilder.STRING_STARTER
            _this.matchObj = python_lib_Re.search(_this.pattern,openedBy)
            if (_this.matchObj is not None):
                self.tokenType = tokenizer_TokenType.STRING
            else:
                _this = tokenizer_impl_LeafTBuilder.SYMBOL_STARTER
                _this.matchObj = python_lib_Re.search(_this.pattern,openedBy)
                if (_this.matchObj is not None):
                    self.tokenType = tokenizer_TokenType.SYMBOL
                    _this = self.stringBuilder
                    s = Std.string(openedBy)
                    _this.b.write(s)
                else:
                    raise haxe_Exception((("QWJZ: Invalid char to start TreeT \"" + ("null" if openedBy is None else openedBy)) + "\""))

    def append(self,value):
        tmp = value.index
        if (tmp == 0):
            _g = value.params[0]
            raise haxe_Exception((("QWJZ: cannot tokenize " + Std.string(value)) + " to a leaf"))
        elif (tmp == 1):
            string = value.params[0]
            _this = self.stringBuilder
            s = Std.string(string)
            _this.b.write(s)
        else:
            pass

    def getTokenType(self):
        return self.tokenType

    def getClosingChars(self):
        if (self.tokenType == tokenizer_TokenType.STRING):
            return tokenizer_Tokenizer.STRING_DELIMITERS
        else:
            return tokenizer_Tokenizer.TOKEN_DELIMITERS

    def build(self):
        if (self.tokenType == tokenizer_TokenType.STRING):
            return parser_Sexp.LeafT((("\"" + HxOverrides.stringOrNull(self.stringBuilder.b.getvalue())) + "\""))
        else:
            return parser_Sexp.LeafT(self.stringBuilder.b.getvalue())



class tokenizer_impl_TreeTBuilder:
    _hx_class_name = "tokenizer.impl.TreeTBuilder"
    __slots__ = ("children", "openedBy")
    _hx_fields = ["children", "openedBy"]
    _hx_methods = ["append", "build", "getTokenType", "getClosingChars"]
    _hx_interfaces = [tokenizer_TokenBuilder]

    def __init__(self,openedBy):
        self.children = []
        self.openedBy = openedBy

    def append(self,value):
        _this = self.children
        _this.append(value)

    def build(self):
        return parser_Sexp.TreeT(self.children)

    def getTokenType(self):
        return tokenizer_TokenType.PARENT

    def getClosingChars(self):
        _g = self.openedBy
        if (_g == "("):
            return [")"]
        elif (_g == "["):
            return ["]"]
        elif (_g == "{"):
            return ["}"]
        else:
            raise haxe_Exception(("Invalid openedBy " + HxOverrides.stringOrNull(self.openedBy)))


Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

factory_EnvironmentFactory.INITIAL_SYMBOLS = ["+", "-", "*", "/", "<=", "read-str", "read-num", "equal?", "++", "seq"]
factory_EnvironmentFactory.INITIAL_PRIMOPS = [interpreter_Value.PrimopV(interpreter_impl_PlusPrimop()), interpreter_Value.PrimopV(interpreter_impl_MinusPrimop()), interpreter_Value.PrimopV(interpreter_impl_MultiplyPrimop()), interpreter_Value.PrimopV(interpreter_impl_DividePrimop()), interpreter_Value.PrimopV(interpreter_impl_LeqPrimop()), interpreter_Value.PrimopV(interpreter_impl_ReadStrPrimop()), interpreter_Value.PrimopV(interpreter_impl_ReadNumPrimop()), interpreter_Value.PrimopV(interpreter_impl_EqualPrimop()), interpreter_Value.PrimopV(interpreter_impl_JoinPrimop()), interpreter_Value.PrimopV(interpreter_impl_SeqPrimop())]
parser_ParseUtils.IS_NUMERIC_REGEXP = EReg("^\\d+(\\.\\d+)?$","")
parser_ParseUtils.IS_STRING_REGEXP = EReg("^\".*\"$","")
parser_ParseUtils.IS_ID_REGEXP = EReg("^[^\"]+$","")
parser_ParseUtils.ILLEGAL_SYMBOLS = ["if", "proc", "declare", "in"]
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")
python_Lib.lineEnd = ("\r\n" if ((Sys.systemName() == "Windows")) else "\n")
tokenizer_Tokenizer.LIST_OPENER = ["[", "{", "("]
tokenizer_Tokenizer.LIST_CLOSER = ["]", "}", ")"]
tokenizer_Tokenizer.TOKEN_DELIMITERS = ((tokenizer_Tokenizer.LIST_OPENER + tokenizer_Tokenizer.LIST_CLOSER) + [" "])
tokenizer_Tokenizer.STRING_DELIMITERS = ["\""]
tokenizer_Tokenizer.AUTO_CLOSE_TOKEN_BUILDERS = [tokenizer_TokenType.NUMBER, tokenizer_TokenType.SYMBOL]
tokenizer_impl_LeafTBuilder.NUMBER_STARTER = EReg("^[0-9\\+-]$","")
tokenizer_impl_LeafTBuilder.STRING_STARTER = EReg("^\"$","")
tokenizer_impl_LeafTBuilder.SYMBOL_STARTER = EReg("^[^\\[\\](){}]$","")

Main.main()
